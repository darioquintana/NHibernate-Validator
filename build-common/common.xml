<?xml version="1.0" ?>
<project xmlns="http://nant.sf.net/release/0.85-rc3/nant.xsd">
 
	<property name="framework.family" value="${framework::get-family(framework::get-target-framework())}"/>
	<property name="framework.version" value="${framework::get-version(framework::get-target-framework())}"/>

	<property name="NHibernate.lib" value="../../lib/${framework.family}/${framework.version}" />

	<property name="project.version" value="5.1.0" overwrite="false" />
 
	<!-- named project configurations -->
	<target name="set-debug-project-configuration" description="Perform a 'debug' build">
		<property name="build.debug" value="Full" />
		<property name="build.optimize" value="false" />
		<property name="build.name" value="NHibernate.Validator-${project.version}-${project.config}" />
		<property name="build.release" value="false" />
		<property name="build.config" value="Debug" />
	</target>
	
	<target name="set-release-project-configuration" description="Perform a 'release' build">
		<property name="build.debug" value="None" />
		<property name="build.optimize" value="true" />
		<property name="build.name" value="NHibernate.Validator-${project.version}" />
		<property name="build.release" value="true" />
		<property name="build.config" value="Release" />
	</target>

	<target name="set-project-configuration">
		<property name="project.config" value="debug" overwrite="false" />
		<if test="${not(target::exists('set-' + project.config + '-project-configuration'))}">
			<fail message="Unknown configuration: '${project.config}'" />
		</if>

		<call target="set-${project.config}-project-configuration" />

		<property name="build.root.dir" value="${root.dir}/build/${build.name}" />
		<property name="build.nuget.dir" value="${root.dir}/build/NuGetDeploy" />
		<property name="build.dir" value="${build.root.dir}" />
		<property name="bin.dir" value="${build.dir}/bin/${nant.settings.currentframework}" dynamic="true" />
		<property name="testresults.dir" value="${build.dir}/test-results" />
		<property name="tools.dir" value="${root.dir}/Tools"/>
	</target>

	<target name="common.init"
		depends="set-project-configuration"
		description="Initializes build properties">
	</target>

	<target name="common.get-nuget-package-path">
		<xmlpeek
			file="${tools.dir}/packages.config"
			xpath="/packages/package[@id = '${nuget-package-id}']/@version"
			property="nuget-package-version" />
		<property name="nuget-package-path" value="${tools.dir}/${nuget-package-id}.${nuget-package-version}/" />
	</target>

	<target name="common.find-nunit" depends="common.nuget-restore">
		<property name="nuget-package-id" value="NUnit.ConsoleRunner" />
		<call target="common.get-nuget-package-path" />
		<property name="nunit-console" value="${nuget-package-path}/tools/nunit3-console.exe" />
	</target>

	<target name="common.download-nuget" depends="common.init">
		<get
			src="https://dist.nuget.org/win-x86-commandline/latest/nuget.exe"
			dest="${tools.dir}/nuget.exe"
			usetimestamp="true"
		/>
	</target>

	<target name="common.nuget-restore" depends="init common.download-nuget">
		<exec basedir="${tools.dir}" workingdir="${root.dir}/Tools" program="NuGet.exe">
			<arg value="install" />
		</exec>
	</target>

	<target name="common.solution-restore" depends="common.download-nuget">
		<exec program="${path::combine(tools.dir, 'nuget.exe')}" verbose="true">
			<arg value="restore" />
			<arg value="${root.dir}/src/NHibernate.Validator.sln" />
		</exec>
	</target>

</project>
